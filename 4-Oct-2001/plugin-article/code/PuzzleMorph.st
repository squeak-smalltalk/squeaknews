'From Squeak3.2alpha of 8 October 2001 [latest update: #4425] on 22 October 2001 at 3:39:04 pm'!RectangleMorph subclass: #PuzzleMorph	instanceVariableNames: 'flashPlayer lastFrame cachedForm miniImage size pieces moveSound '	classVariableNames: ''	poolDictionaries: ''	category: 'Gamelets'!!PuzzleMorph methodsFor: 'private' stamp: 'mir 2/29/2000 11:48'!computeCachedForm	| puzzleForm playerExtent puzzleExtent |	playerExtent _ self flashPlayer extent.	puzzleExtent _ ((playerExtent x / playerExtent y * self extent x) @ self extent y) truncated.	self flashPlayer extent: puzzleExtent.	self flashPlayer color: Color transparent.	self flashPlayer defaultAALevel: 4.	puzzleForm _ self flashPlayer imageForm.	self flashPlayer extent: playerExtent.	puzzleForm mapColor: self flashPlayer color to: Color white.	^puzzleForm! !!PuzzleMorph methodsFor: 'private' stamp: 'mir 2/13/2000 00:02'!movePiece: boardPos	| x y |	"Look for free neighbor cell"	x _ boardPos x.	y _ boardPos y.	(x > 1		and: [(self pieces at: x-1 at: y) isNil])		ifTrue: [^self movePieceFrom: boardPos to: (x-1)@y].	(y > 1		and: [(self pieces at: x at: y-1) isNil])		ifTrue: [^self movePieceFrom: boardPos to: x@(y-1)].	(x < self pieces width		and: [(self pieces at: x+1 at: y) isNil])		ifTrue: [^self movePieceFrom: boardPos to: (x+1)@y].	(y < self pieces height		and: [(self pieces at: x at: y+1) isNil])		ifTrue: [^self movePieceFrom: boardPos to: x@(y+1)].! !!PuzzleMorph methodsFor: 'private' stamp: 'mir 2/13/2000 00:08'!movePieceFrom: org to: dst	self pieces at: dst x at: dst y put: (self pieces at: org x at: org y).	self pieces at: org x at: org y put: nil.	self changed.	self playMoveSound.! !!PuzzleMorph methodsFor: 'private' stamp: 'mir 2/28/2000 19:59'!pieceHeight	^(self extent y / size) truncated! !!PuzzleMorph methodsFor: 'private' stamp: 'mir 2/28/2000 19:59'!pieceWidth	^(self extent x / size) truncated! !!PuzzleMorph methodsFor: 'private' stamp: 'mir 2/12/2000 23:34'!pieces	^pieces! !!PuzzleMorph methodsFor: 'private' stamp: 'mir 3/31/2000 17:28'!playMoveSound	self moveSound ifNotNil: [self moveSound play]! !!PuzzleMorph methodsFor: 'event handling' stamp: 'mir 2/12/2000 23:49'!handlesMouseDown: evt	^true! !!PuzzleMorph methodsFor: 'event handling' stamp: 'mir 2/12/2000 23:55'!mouseDown: evt	| p x y |	p _ evt cursorPoint.	p _ p - self position.	x _ (p x // self pieceWidth) + 1.	y _ (p y // self pieceHeight) + 1.	(self pieces at: x at: y) notNil		ifTrue: [self movePiece: x@y]! !!PuzzleMorph methodsFor: 'drawing' stamp: 'mir 2/28/2000 19:31'!drawOn: aCanvas	| w h boardPos puzzleForm |	w _ self pieceWidth.	h _ self pieceHeight.	puzzleForm _ self form.	pieces rowAndColumnValuesDo: [:row :col :piecePosition |		boardPos _ self position + (((row-1)*w)@((col-1)*h)).		piecePosition			ifNil: [aCanvas fillRectangle: (boardPos extent: w@h) color: self color]			ifNotNil: [				aCanvas					image: puzzleForm					at: boardPos					sourceRect: ((((piecePosition x - 1)*w)@((piecePosition y - 1)*h)) extent: w@h)					rule: Form over].		aCanvas frameRectangle: (boardPos extent: w@h) color: Color black]! !!PuzzleMorph methodsFor: 'accessing' stamp: 'mir 2/28/2000 20:16'!flashPlayer	^flashPlayer! !!PuzzleMorph methodsFor: 'accessing' stamp: 'mir 2/28/2000 20:16'!flashPlayer: aPlayer	flashPlayer _ aPlayer! !!PuzzleMorph methodsFor: 'accessing' stamp: 'mir 2/28/2000 20:22'!form	(lastFrame ~= self flashPlayer frameNumber 		or: [cachedForm isNil])		ifTrue: [			cachedForm _ self computeCachedForm.			lastFrame _ self flashPlayer frameNumber].	^cachedForm! !!PuzzleMorph methodsFor: 'accessing' stamp: 'mir 2/28/2000 20:06'!miniImage: anImageMorph	miniImage _ anImageMorph! !!PuzzleMorph methodsFor: 'accessing' stamp: 'mir 2/13/2000 00:03'!moveSound	^moveSound! !!PuzzleMorph methodsFor: 'accessing' stamp: 'mir 2/13/2000 00:03'!moveSound: aSound	moveSound _ aSound! !!PuzzleMorph methodsFor: 'accessing' stamp: 'mir 2/12/2000 23:34'!size	^size! !!PuzzleMorph methodsFor: 'accessing' stamp: 'mir 2/28/2000 19:43'!size: anInteger	size _ anInteger.	self initPieces! !!PuzzleMorph methodsFor: 'initialization' stamp: 'mir 2/12/2000 23:54'!initPieces	pieces _ Array2D extent: size@size.	pieces rowsAndColumnsDo: [:row :col |			pieces at: row at: col put: row@col].	pieces at: size at: size put: nil! !!PuzzleMorph methodsFor: 'initialization' stamp: 'mir 2/28/2000 19:40'!initialize	super initialize.	lastFrame _ 1! !!PuzzleMorph methodsFor: 'initialization' stamp: 'mir 2/28/2000 20:15'!updateMiniImage	| playerExtent puzzleForm |	playerExtent _ self flashPlayer extent.	self flashPlayer extent: 60@60.	self flashPlayer color: Color transparent.	puzzleForm _ self flashPlayer imageForm.	self flashPlayer extent: playerExtent.	puzzleForm mapColor: self flashPlayer color to: Color white.	miniImage image: puzzleForm.	miniImage invalidRect: miniImage bounds! !!PuzzleMorph methodsFor: 'actions' stamp: 'mir 2/13/2000 00:07'!shuffle	| rows cols bottomCorner piecePos |	rows _ (1 to: self size) asArray shuffled.	cols _ (1 to: self size) asArray shuffled.	self pieces rowsAndColumnsDo: [:row :col |		piecePos _ (rows at: row)@(cols at: col).		(piecePos = self pieces extent)			ifTrue: [bottomCorner _ row@col]			ifFalse: [self pieces at: row at: col put: piecePos]].	self pieces at: bottomCorner x at: bottomCorner y put: (self pieces at: self pieces width at: self pieces height).	self pieces at: self pieces width at: self pieces height put: nil.	self changed! !!PuzzleMorph methodsFor: 'stepping' stamp: 'mir 2/28/2000 20:49'!step	(self flashPlayer notNil		and: [self flashPlayer maxFrames > 1])		ifTrue: [			"self updateMiniImage."			self invalidRect: self bounds].! !!PuzzleMorph methodsFor: 'stepping' stamp: 'mir 2/28/2000 20:24'!stepTime	^100! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PuzzleMorph class	instanceVariableNames: ''!!PuzzleMorph class methodsFor: 'instance creation' stamp: 'mir 2/28/2000 20:50'!createMiniImage: player	player extent: 60@60.	player color: Color transparent.	player startPlaying; startStepping.	^player! !!PuzzleMorph class methodsFor: 'instance creation' stamp: 'mir 10/22/2001 15:32'!createPuzzle: player moveSound: soundAsset size: puzzleSize	| morph align puzzle shuffleButton col miniMorph |	morph _ RectangleMorph new.	align _ AlignmentMorph newRow.	align hResizing: #shrinkWrap;	 vResizing: #spaceFill;	 wrapCentering: #center;	 color: Color white.	puzzle _ PuzzleMorph player: player extent: 200@200 size: puzzleSize.	puzzle moveSound: soundAsset.	align addMorph: puzzle.	col _ AlignmentMorph newColumn.	col hResizing: #spaceFill;	 vResizing: #shrinkWrap;	 wrapCentering: #center;	 color: Color white.	miniMorph _ self createMiniImage: player.	puzzle miniImage: miniMorph.	col addMorphBack: miniMorph.	col addMorphBack: AlignmentMorph newVariableTransparentSpacer.	shuffleButton _ SimpleButtonMorph new target: puzzle.	shuffleButton color: Color gray;	 borderWidth: 1;	 borderColor: Color black.	shuffleButton actionSelector: #shuffle.	shuffleButton label: 'Shuffle'.	col addMorphBack: shuffleButton.	align addMorphBack: col.	morph addMorph: align.	morph extent: 200@200.	morph color: Color transparent.	morph align: morph bounds bottomCenter with: Display boundingBox center.	morph startStepping.	^morph! !!PuzzleMorph class methodsFor: 'instance creation' stamp: 'mir 2/28/2000 19:40'!new	^super new initialize! !!PuzzleMorph class methodsFor: 'instance creation' stamp: 'mir 2/28/2000 20:48'!player: puzzlePlayer extent: extent size: aSize	| puzzle |	puzzle _ self new.	puzzle		flashPlayer: puzzlePlayer;		extent: extent;		size: aSize;		color: Color veryLightGray.	puzzle shuffle.	^puzzle! !!PuzzleMorph class methodsFor: 'private' stamp: 'mir 2/28/2000 20:10'!defaultSound	^SampledSound new			setSamples: SampledSound coffeeCupClink			samplingRate: 12000! !!PuzzleMorph class methodsFor: 'example' stamp: 'mir 10/22/2001 15:38'!example	"PuzzleMorph example"	| flashMorph morph |	flashMorph _ (FlashMorphReader fileNamed: 'plugin-article\code\ball.swf') processFile. 	morph _ PuzzleMorph createPuzzle: flashMorph moveSound: PuzzleMorph defaultSound size: 3.	morph openInWorld! !