'From Squeak3.1alpha of 7 March 2001 [latest update: #4332] on 11 September 2001 at 9:29:46 pm'!!HandMorph methodsFor: 'private events' stamp: 'MTE 9/11/2001 01:44'!sendKeyboardEvent: anEvent	"Send the event to the morph currently holding the focus, or if none to the owner of the hand."	EzineEntry isLoggedOn ifFalse: [^self].	^self sendEvent: anEvent focus: self keyboardFocus clear:[self keyboardFocus: nil]! !!ProjectLauncher methodsFor: 'running' stamp: 'MTE 9/11/2001 01:28'!startUpAfterLogin	| scriptName loader isUrl |	self setupFlaps.	EzineEntry isLoggedOn ifFalse: [^self].	HTTPClient isRunningInBrowser ifTrue:[		self setupFromParameters.		scriptName _ self parameterAt: 'src'.		CodeLoader defaultBaseURL: (self parameterAt: 'Base').	] ifFalse:[		scriptName _ (Smalltalk getSystemAttribute: 2) ifNil:[''].		scriptName isEmpty ifFalse:[			"figure out if script name is a URL by itself"			isUrl _ (scriptName asLowercase beginsWith:'http://') or:[					(scriptName asLowercase beginsWith:'file://') or:[					(scriptName asLowercase beginsWith:'ftp://')]].			isUrl ifFalse:[scriptName _ 'file://',scriptName]].	].	scriptName isEmptyOrNil		ifTrue:[^Preferences eToyFriendly ifTrue: [self currentWorld addGlobalFlaps]].	loader _ CodeLoader new.	loader loadSourceFiles: (Array with: scriptName).	(scriptName asLowercase endsWith: '.pr') 		ifTrue:[self installProjectFrom: loader]		ifFalse:[loader installSourceFiles].! !!SystemDictionary methodsFor: 'snapshot and quit' stamp: 'MTE 9/11/2001 03:10'!snapshot: save andQuit: quit embedded: embeddedFlag	"Mark the changes file and close all files. If save is true, save the current state of this Smalltalk in the image file. If quit is true, then exit to the outer shell. The latter part of this method runs when resuming a previously saved image. The resume logic checks for a document file to process when starting up."	| resuming msg sourceLink |	Object flushDependents.	Object flushEvents.		(save and: [ (SourceFiles at: 2) notNil]) ifTrue:			[msg _  (quit			ifTrue: ['----QUIT----']				ifFalse: ['----SNAPSHOT----'])				, Date dateAndTimeNow printString.			sourceLink _ ' priorSource: ' , LastQuitLogPosition printString.			self assureStartupStampLogged.			LastQuitLogPosition _ (SourceFiles at: 2) setToEnd; position.			self logChange: msg , sourceLink.			Transcript cr; show: msg].	self processShutDownList: quit.	Cursor write show.	save ifTrue: [resuming _ embeddedFlag 					ifTrue: [self snapshotEmbeddedPrimitive] 					ifFalse: [self snapshotPrimitive].  "<-- PC frozen here on image file"				resuming == false "guard against failure" ifTrue:					["Time to reclaim segment files is immediately after a save"					Smalltalk at: #ImageSegment						ifPresent: [:theClass | theClass reclaimObsoleteSegmentFiles]]]		ifFalse: [resuming _ false].	quit & (resuming == false) ifTrue: [self quitPrimitive].	Cursor normal show.	self setGCParameters.	resuming == true ifTrue: [self clearExternalObjects].	self processStartUpList: resuming == true.	resuming == true ifTrue:[		self setPlatformPreferences.		self readDocumentFile].	Smalltalk isMorphic ifTrue: [SystemWindow wakeUpTopWindowUponStartup].	"Now it's time to raise an error"	resuming == nil ifTrue:[self error:'Failed to write image file (disk full?)'].	^ resuming! !!SystemDictionary methodsFor: 'sources, change log' stamp: 'MTE 9/11/2001 02:15'!assureStartupStampLogged	"If there is a startup stamp not yet actually logged to disk, do it now."	| changesFile |	StartupStamp ifNil: [^ self].	(SourceFiles isNil or: [(changesFile _ SourceFiles at: 2) == nil]) ifTrue: [^ self].     EzineEntry ezineReadOnly ifTrue: [^self].	changesFile isReadOnly ifTrue:[^self].	changesFile setToEnd; cr; cr.	changesFile nextChunkPut: StartupStamp asString; cr.	StartupStamp _ nil.	self forceChangesToDisk.! !!SystemDictionary methodsFor: 'sources, change log' stamp: 'MTE 9/11/2001 09:38'!logChange: aStringOrText 	"Write the argument, aString, onto the changes file."	| aString changesFile |	(SourceFiles isNil or: [(SourceFiles at: 2) == nil]) ifTrue: [^ self].	self assureStartupStampLogged.	aStringOrText isText		ifTrue: [aString _ aStringOrText string]		ifFalse: [aString _ aStringOrText].	(aString isMemberOf: String)		ifFalse: [self error: 'can''t log this change'].	(aString findFirst: [:char | char isSeparator not]) = 0		ifTrue: [^ self].  "null doits confuse replay"	(changesFile _ SourceFiles at: 2).	changesFile isReadOnly ifTrue:[^self].     EzineEntry ezineReadOnly ifTrue: [ ^self].	changesFile setToEnd; cr; cr.	changesFile nextChunkPut: aString.		"If want style changes in DoIt, use nextChunkPutWithStyle:, and allow Texts to get here"	self forceChangesToDisk.! !!TheWorldMenu methodsFor: 'popups' stamp: 'MTE 9/11/2001 21:27'!buildWorldMenu	"Build the menu that is put up when the screen-desktop is clicked on"	| menu | "Hijack the menu"    EzineEntry hijackMenus ifTrue: [^self buildEzineMenu].	menu _ MenuMorph new defaultTarget: self.	self colorForDebugging: menu.	menu addStayUpItem.	self fillIn: menu from: {		{'previous article' . { #myWorld . #goBack } }.		{'jump to article...' . { #myWorld . #jumpToProject } }.		{'save article on file...' . { #myWorld  . #saveOnFile } }.		{'load article from file...' . { self  . #loadProject } }.		nil}.	myWorld addUndoItemsTo: menu.		self fillIn: menu from: {		{'restore display (r)' . { World . #restoreMorphicDisplay } }.		nil}.	Preferences simpleMenus ifFalse:		[self fillIn: menu from: { 			{'open...' . { self  . #openWindow } }.			{'windows...' . { self  . #windowsDo } }.			{'changes...' . { self  . #changesDo } }}].	self fillIn: menu from: { 		{'help...' . { self  . #helpDo } }.		{'appearance...' . { self  . #appearanceDo } }}.	Preferences simpleMenus ifFalse:		[self fillIn: menu from: {			{'do...' . { Utilities . #offerCommonRequests} } }].	self fillIn: menu from: { 		nil.		{'new morph...' . { self  . #newMorph } }.		{'authoring tools...' . { self  . #scriptingDo } }.		{'playfield options...' . { self  . #playfieldDo } }.		{'flaps...'. { self . #flapsDo } }.		{'projects...' . { self  . #projectDo } }}.	self fillIn: menu from: { 		nil.		{'objects (o)' . { #myWorld . #activateObjectsTool } . 			'A tool for finding and obtaining many kinds of objects'}.		nil}.	Preferences simpleMenus ifFalse:		[self fillIn: menu from: { 			{'print PS to file...' . { self  . #printWorldOnFile } }.			{'debug...' . { self  . #debugDo } }}].	self fillIn: menu from: { 		nil.		{'save' . { self  . #saveSession } }.		{'save as...' . { Smalltalk . #saveAs } }.		{'save and quit' . { self  . #saveAndQuit } }.		{'quit' . { self  . #quitSession } }}.	^ menu! !Smalltalk condenseChanges!----QUIT----#(11 September 2001 9:30:17 pm) priorSource: 6786!Preferences installIconicHaloSpecs!Project storeAllInSegments!Gazoz _ self!----QUIT----#(11 September 2001 9:38:08 pm) priorSource: 6814!----STARTUP----#(11 September 2001 10:00:04 pm) as C:\WINDOWS\Desktop\Squeak News\September 2001\final\ezine.image!Preferences installHaloTheme: #hijackHaloSpecs.loggedOn_ false.Gazoz delete. Gazoz _ nil. World refreshWorld.Smalltalk snapshot: true andQuit: true.!Preferences installIconicHaloSpecs!self startStepping!Gazoz _ self!----QUIT----#(11 September 2001 10:03:08 pm) priorSource: 6959!----STARTUP----#(11 September 2001 10:07:22 pm) as C:\WINDOWS\Desktop\Squeak News\September 2001\final\ezine.image!Preferences installHaloTheme: #hijackHaloSpecs.loggedOn_ false.Gazoz delete. Gazoz _ nil. World refreshWorld.Smalltalk snapshot: true andQuit: true.!self delete!Gazoz _ self!----QUIT----#(11 September 2001 10:09:35 pm) priorSource: 7368!